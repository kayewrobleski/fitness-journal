// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id            String   @id @default(cuid())
  sessionToken  String   @unique
  userId        String
  expires       DateTime
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String              @id @default(cuid())
  name              String?
  email             String              @unique
  password          String?
  emailVerified     DateTime?
  image             String?
  userRole          UserRole            @relation(fields: [role], references: [role])
  role              String              @default("user")    
  accounts          Account[]
  sessions          Session[]
  preferences       UserPreferences[]
  plans             Plan[]
  workouts          Workout[]
  exercises         Exercise[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserRole {
  role      String  @id
  users     User[]
}

model UserPreferences {
  id                    Int           @id @default(autoincrement())
  user                  User          @relation(fields: [userId], references: [id])
  userId                String        @unique
  defaultUnitSystem     UnitSystem    @relation(fields: [defaultUnitSystemId], references: [id])
  defaultUnitSystemId   Int          
}

model MovementPattern {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  exercises   Exercise[]
}

model Exercise {
  id                Int               @id @default(autoincrement())
  name              String            
  movementPattern   MovementPattern   @relation(fields: [movementPatternId], references: [id])
  movementPatternId Int
  primaryMuscles    String[]
  secondaryMuscles  String[]
  planExercises     PlanExercise[]
  global            Boolean           @default(false)
  deprecated        Boolean           @default(false)
  user              User?             @relation(fields: [userEmail], references: [email])
  userEmail         String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  @@unique([name, userEmail])

}

model Plan {
  id                Int                 @id @default(autoincrement())
  name              String              
  planSets          PlanSet[]  
  workouts          Workout[]
  user              User                @relation(fields: [userEmail], references: [email])
  userEmail         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  @@unique([name, userEmail])
}

model PlanSet {
  id                Int                 @id @default(autoincrement())
  plan              Plan                @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId            Int
  order             Int
  planExercises     PlanExercise[]  
  workoutSets       WorkoutSet[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt   
}

model PlanExercise {
  id                Int                 @id @default(autoincrement())
  planSet           PlanSet             @relation(fields:[planSetId], references: [id], onDelete: Cascade)
  planSetId         Int
  exercise          Exercise            @relation(fields: [exerciseId], references: [id])
  exerciseId        Int
  targetVolume      PlanVolume[]
  order             Int
  workoutExercises  WorkoutExercise[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt        
}

model PlanVolume {
  id                Int                 @id @default(autoincrement())
  planExercise      PlanExercise        @relation(fields: [planExerciseId], references: [id], onDelete: Cascade)
  planExerciseId    Int
  sets              Int
  minReps           Int
  maxReps           Int
  rest              Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Workout {
  id                  Int               @id @default(autoincrement())
  plan                Plan              @relation(fields: [planId], references: [id])
  planId              Int
  workoutSets         WorkoutSet[] 
  completedOn         DateTime
  user                User              @relation(fields: [userId], references: [id])
  userId              String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt              
}

model WorkoutSet {
  id                  Int                 @id @default(autoincrement())
  workout             Workout             @relation(fields: [workoutId], references: [id])
  workoutId           Int
  planSet             PlanSet             @relation(fields: [planSetId], references: [id])
  planSetId           Int                 
  workoutExercises    WorkoutExercise[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model WorkoutExercise {
  id                  Int                 @id @default(autoincrement())
  workoutSet          WorkoutSet          @relation(fields: [workoutSetId], references: [id])
  workoutSetId        Int
  planExercise        PlanExercise        @relation(fields: [planExerciseId], references: [id])
  planExerciseId      Int
  workoutVolume       WorkoutVolume[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model WorkoutVolume {
  id                  Int                 @id @default(autoincrement())
  reps                Int
  weight              Int
  unitSystem          UnitSystem          @relation(fields: [unitSystemId], references: [id])
  unitSystemId        Int
  rest                Int
  workoutExercise     WorkoutExercise     @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId   Int
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}

model UnitSystem {
  id                  Int                 @id @default(autoincrement())
  name                String
  unit                String
  workoutVolume       WorkoutVolume[]
  userPreferences     UserPreferences[]
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
}